# -*- coding: utf-8 -*-
"""Smartwatch-Data-Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uiyC--SenSLS6Pzhivv15nreQ42aobW7

# Smartwatch Data Analysis
"""

# Importing necessary libraries for data analysis and visualization
import pandas as pd        # Pandas: powerful data manipulation library
import numpy as np         # NumPy: fundamental package for scientific computing
import matplotlib.pyplot as plt    # Matplotlib: plotting library for creating static, interactive, and animated visualizations
import plotly.express as px        # Plotly Express: easy-to-use interface for creating interactive plots
import plotly.graph_objects as go  # Plotly Graph Objects: provides more control over plots with a lower-level interface

# Load the daily activity data from the provided URL into a Pandas DataFrame.
data = pd.read_csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/dailyActivity_merged.csv")

# Display the first few rows of the DataFrame to examine the structure and content of the data.
print(data.head())

# Displaying a brief summary of the DataFrame 'data',
# showing column data types, non-null counts, and memory usage.
# It uses the info() method.
data_summary = data.info()
print(data_summary)

# Convert the 'ActivityDate' column to datetime format to improve time management.
data["ActivityDate"] = pd.to_datetime(data["ActivityDate"], format="%m/%d/%Y")

# Print summary information about the DataFrame to confirm the modifications.
print(data.info())

# Determine the total minutes spent across different activity levels and add it as a new column.
data["TotalMinutes"] = (
    data["VeryActiveMinutes"] +
    data["FairlyActiveMinutes"] +
    data["LightlyActiveMinutes"] +
    data["SedentaryMinutes"]
)

# Randomly select a subset of total minutes data for analysis and print it.
print(data["TotalMinutes"].sample(5))

import seaborn as sns

# Visualizing the relationship between Calories and Total Steps with a unique style.
plt.figure(figsize=(10, 6))

# Scatter plot with a twist of color.
sns.scatterplot(data=data, x="Calories", y="TotalSteps", hue="VeryActiveMinutes", palette="viridis", size="VeryActiveMinutes", sizes=(20, 200))

# Adding a trendline with a vibrant touch.
sns.regplot(data=data, x="Calories", y="TotalSteps", scatter=False, color='orange')

# Adding title and labels to the plot.
plt.title("Exploring the Relationship between Calories & Total Steps")
plt.xlabel("Calories")
plt.ylabel("Total Steps")

# Adding a legend.
plt.legend(title='Very Active Minutes')

# Displaying the revamped plot.
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculating the mean of different activity minutes.
activity_counts = data[["VeryActiveMinutes", "FairlyActiveMinutes",
                       "LightlyActiveMinutes", "SedentaryMinutes"]].mean()

# Labels for the pie chart.
labels = ["Highly Active", "Moderately Active",
          "Lightly Active", "Inactive"]

# Generating a custom color palette.
custom_colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99']

# Creating a pie chart with custom colors using Matplotlib.
plt.figure(figsize=(8, 8))
plt.pie(activity_counts, labels=labels, colors=custom_colors, autopct='%1.1f%%', startangle=140)

# Adding a creative title to the plot.
plt.title('Activity Breakdown')

# Displaying the modified plot.
plt.show()

"""
## Observations indicate that:

- 81.3% of the total daily minutes were spent inactive.
- Lightly active minutes constituted 15.8% of the day.
- On average, merely 21 minutes (1.74%) were classified as very active.
- Fairly active minutes accounted for only 1.11% of the day, totaling 13 minutes."""